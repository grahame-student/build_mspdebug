Index: libmsp430/DLL430_v3/src/TI/DLL430/UsbCdcIoChannel.cpp
===================================================================
--- libmsp430/DLL430_v3/src/TI/DLL430/UsbCdcIoChannel.cpp	(revision 27319)
+++ libmsp430/DLL430_v3/src/TI/DLL430/UsbCdcIoChannel.cpp	(working copy)
@@ -375,7 +375,7 @@
 
 bool UsbCdcIoChannel::openPort()
 {
-	ioService = new boost::asio::io_service;
+	ioService = new boost::asio::io_context;
 	port = new boost::asio::serial_port(*ioService);
 	timer = new boost::asio::deadline_timer(*ioService);
 
Index: libmsp430/DLL430_v3/src/TI/DLL430/UsbCdcIoChannel.h
===================================================================
--- libmsp430/DLL430_v3/src/TI/DLL430/UsbCdcIoChannel.h	(revision 27319)
+++ libmsp430/DLL430_v3/src/TI/DLL430/UsbCdcIoChannel.h	(working copy)
@@ -73,7 +73,7 @@
 
 		private:
 			std::vector<uint8_t> inputBuffer;
-			boost::asio::io_service* ioService;
+			boost::asio::io_context* ioService;
 			boost::asio::serial_port* port;
 			boost::asio::deadline_timer* timer;
 			ComState comState;
Index: libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceSerialUART.cpp
===================================================================
--- libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceSerialUART.cpp	(revision 27319)
+++ libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceSerialUART.cpp	(working copy)
@@ -193,27 +193,27 @@
     
 	port->set_option(RESETControl(LOW_SIGNAL));
 	port->set_option(TESTControl(LOW_SIGNAL));
-	this_thread::sleep_for(chrono::milliseconds(10));
+	this_thread::sleep_for(boost::asio::chrono::milliseconds(10));
 	port->set_option(TESTControl(HIGH_SIGNAL));
-	this_thread::sleep_for(chrono::milliseconds(10));
+	this_thread::sleep_for(boost::asio::chrono::milliseconds(10));
 	port->set_option(TESTControl(LOW_SIGNAL));
-	this_thread::sleep_for(chrono::milliseconds(10));
+	this_thread::sleep_for(boost::asio::chrono::milliseconds(10));
 	port->set_option(TESTControl(HIGH_SIGNAL));
-	this_thread::sleep_for(chrono::milliseconds(10));
+	this_thread::sleep_for(boost::asio::chrono::milliseconds(10));
 	if( method == STANDARD_INVOKE )
 	{
 	  port->set_option(RESETControl(HIGH_SIGNAL));
-	  this_thread::sleep_for(chrono::milliseconds(10));
+	  this_thread::sleep_for(boost::asio::chrono::milliseconds(10));
 	  port->set_option(TESTControl(LOW_SIGNAL));
 	}
 	else if ( method == BSL_XXXX_INVOKE )
 	{
 	  port->set_option(TESTControl(LOW_SIGNAL));
-	  this_thread::sleep_for(chrono::milliseconds(10));
+	  this_thread::sleep_for(boost::asio::chrono::milliseconds(10));
 	  port->set_option(RESETControl(HIGH_SIGNAL));
 	}
 	
-	this_thread::sleep_for(chrono::milliseconds(250));
+	this_thread::sleep_for(boost::asio::chrono::milliseconds(250));
 	
 }
 
Index: libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceUSB.cpp
===================================================================
--- libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceUSB.cpp	(revision 27319)
+++ libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceUSB.cpp	(working copy)
@@ -189,7 +189,7 @@
 			return ERROR_READING_DATA; 
 		}
 
-		this_thread::sleep_for(chrono::milliseconds(500));
+		this_thread::sleep_for(boost::asio::chrono::milliseconds(500));
 	}
 
 	return 0;
Index: libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceUSB.h
===================================================================
--- libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceUSB.h	(revision 27319)
+++ libmsp430/ThirdParty/BSL430_DLL/BSL430_DLL/Physical_Interfaces/MSPBSL_PhysicalInterfaceUSB.h	(working copy)
@@ -38,7 +38,7 @@
 
 #pragma once
 
-#include <hidapi.h>
+#include <hidapi/hidapi.h>
 
 #include "MSPBSL_PhysicalInterface.h"
 
